#!/usr/bin/env bash
#
# bootstrap installs things.


export DOTS=$HOME/dotfiles

# Exit immediately if a command exits with a non-zero status.
set -e

echo ''

## Create default functions for interactive messages using solarized colors
source "$DOTS/functions/interactive"


# Create local folder for private files
if [ ! -d  "$DOTS/local/" ]; then
	mkdir -p "$DOTS/local/"
fi


# Create basic gitconfig.symlink file if one doesn't already exits
setup_gitconfig () {
	GIT_LOCAL="$DOTS/local/gitconfig.local.symlink"
	
  if ! [ -f "$GIT_LOCAL" ]
  then
    msg_info 'Setting up git'

    #git_credential='cache'
    #if [ "$(uname -s)" == "Darwin" ]
    #then
    #  git_credential='osxkeychain'
    #fi

    msg_user ' - What is your github author name?'
    read -e git_authorname
    msg_user ' - What is your github author email?'
    read -e git_authoremail

    #sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

		echo "[user]" > "$GIT_LOCAL"
		echo "  name=\"$git_authorname\"" >> "$GIT_LOCAL"
		echo "  email=\"$git_authoremail\"" >> "$GIT_LOCAL"

    msg_success 'Git configured with local information'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        msg_user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      msg_success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      msg_success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      msg_success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    msg_success "linked $1 to $2"
  fi
}


# Finds all the *.symlink files and runs links_file() on each
install_dotfiles () {
  msg_info 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTS" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}


# Prompt to configure OS X Defaults
install_osx_defaults() {
	local overwrite=false
	local name="OS X defaults"

	echo ""
	msg_user "Configure ${name}?: \n\
	[y]es, [n]o?"
	read -n 1 action

	case "$action" in
		y | Y )
			overwrite=true;;
		n | N )
			backup=false;;
		* )
		;;
	esac
  
	if [ "$overwrite" == "true" ]
	then
		msg_info "Setting ${name}"
		
		if source $DOTS/osx/set-defaults
		then
			msg_success "${name} set"
		else
			msg_fail "Error setting ${name}"
		fi
		
	else
      msg_success "Skipped ${name}"
	fi
}


# Install dependencies (Homebrew, etc.)
install_dependencies() {
	msg_info "Installing dependencies from bin/dot"
	if source bin/dot #> /tmp/dotfiles-dot 2>&1
	then
		msg_success "Dependencies installed"
	else
		msg_fail "Error installing dependencies"
	fi
}



setup_gitconfig
install_dotfiles
install_osx_defaults
install_dependencies


echo ''
echo 'ðŸ¦„  All installed!'
