#!/bin/sh

# Swap hosts files from ad blocker to standard

# Interactive messages and colors
export TXT_NC=$(tput sgr 0)
export TXT_bold=$(tput bold)
export TXT_blue=$(tput setaf 33)
export TXT_green=$(tput setaf 64)
export TXT_orange=$(tput setaf 166)
export TXT_red=$(tput setaf 124)


# Interaction functions
msg_info () {
  printf "\r  ${TXT_bold}${TXT_blue}[ ... ]${TXT_NC} $1\n"
}

msg_success () {
  printf "\r  ${TXT_bold}${TXT_green}[ OK ]${TXT_NC} $1\n"
}

msg_fail () {
  printf "\r  ${TXT_bold}${TXT_red}[ FAIL ]${TXT_NC} $1\n"
  echo ''
  exit
}



# Path to hosts repo
if [[ -n "$1" ]]; then
	# $HOSTS_REPO passed as parameter
	HOSTS_REPO="$1"
elif [[ -z "$HOSTS_REPO" ]]; then
	# $HOSTS_REPO not set, use default
	HOSTS_REPO="$HOME/hosts"
	info "Using default hosts repo location: ${HOSTS_REPO}"
fi


# Make sure host repo is directory
if [[ ! -d "$HOSTS_REPO" ]]; then
	msg_error "Hosts repo does not exist: ${HOSTS_REPO}"
	exit 1
fi


# Must run as root, pass $HOSTS_REPO as parameter
if [ -z "$SUDO_COMMAND" ]; then
	msg_info "Re-running script as root"
	sudo $0 "$HOSTS_REPO"
	exit 0		
fi


HOSTS_CUSTOM="${HOSTS_REPO}/hosts"
HOSTS_PROD="/etc/hosts"


# Prepare std hosts file
create_std_hosts() {
	# Add boilerplate hosts. Will clobber old hosts
	cat <<EOT > "$HOSTS_PROD"
# Standard hosts file w/o ad blocking

127.0.0.1 localhost
127.0.0.1 localhost.localdomain
127.0.0.1 local
255.255.255.255 broadcasthost
::1 localhost
fe80::1%lo0 localhost
0.0.0.0 0.0.0.0

EOT

	# Add myhosts to std hosts file
	cat "${HOSTS_REPO}/myhosts" >> "$HOSTS_PROD"
	if [ $? != 0 ]; then
		msg_fail "Unable to create standard hosts file in $HOSTS_PROD"
	fi
}


flushcache() {
	dscacheutil -flushcache;sudo killall -HUP mDNSResponder
}

current_size=$(stat -f%z "$HOSTS_PROD")
if [ $current_size -le 1000 ]; then
	# Currently using standard hosts
	# msg_info "Installing custom hosts file"
	
	# Create a new custom hosts file if older than 30 days
	if [[ $(find "$HOSTS_CUSTOM" -mtime +30 -print) ]]; then
		msg_info "Hosts file is outdated, generating new one"
		pushd "$HOSTS_REPO"
		# updateHostsFile.py will take over from here to complete process and flush cache
		python3 updateHostsFile.py
		popd
	else
		cp "$HOSTS_CUSTOM" "$HOSTS_PROD"
		if [ $? != 0 ]; then
			msg_fail "Something died"
		fi
	fi
	
	msg_success "Custom hosts file installed"
		
else
	# Using custom hosts
	# msg_info "Installing standard hosts file"
	create_std_hosts
	flushcache
	msg_success "Standard hosts file installed"
fi


exit 0